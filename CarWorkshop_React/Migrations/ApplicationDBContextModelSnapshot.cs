// <auto-generated />
using System;
using CarWorkshop_React.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarWorkshop_React.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarWorkshop_React.Models.AdditionalTicketInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PartsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PricePaid")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AdditionalTicketInfos");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.DateTimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Till")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("DateTimeSlots");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WorkingSince")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdditionalTicketInfoId")
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("PartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalTicketInfoId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdditionalTicketInfoId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("DateTimeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalTicketInfoId");

                    b.HasIndex("CarId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.DateTimeSlot", b =>
                {
                    b.HasOne("CarWorkshop_React.Models.Ticket", null)
                        .WithMany("DateTimeSlots")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Part", b =>
                {
                    b.HasOne("CarWorkshop_React.Models.AdditionalTicketInfo", null)
                        .WithMany("Parts")
                        .HasForeignKey("AdditionalTicketInfoId");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Ticket", b =>
                {
                    b.HasOne("CarWorkshop_React.Models.AdditionalTicketInfo", "AdditionalTicketInfo")
                        .WithMany()
                        .HasForeignKey("AdditionalTicketInfoId");

                    b.HasOne("CarWorkshop_React.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWorkshop_React.Models.Employee", "Employee")
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("AdditionalTicketInfo");

                    b.Navigation("Car");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.AdditionalTicketInfo", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Employee", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CarWorkshop_React.Models.Ticket", b =>
                {
                    b.Navigation("DateTimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
